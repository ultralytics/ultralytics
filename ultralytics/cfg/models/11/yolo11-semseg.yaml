# Ultralytics YOLO ðŸš€, AGPL-3.0 license
# YOLO11-seg instance segmentation model. For Usage examples see https://docs.ultralytics.com/tasks/segment

# Parameters
nc: 19 # number of classes
scales: # model compound scaling constants, i.e. 'model=yolo11n-seg.yaml' will call yolo11-seg.yaml with scale 'n'
  # [depth, width, max_channels]
  n: [0.50, 0.25, 1024] # summary: 355 layers, 2876848 parameters, 2876832 gradients, 10.5 GFLOPs
  s: [0.50, 0.50, 1024] # summary: 355 layers, 10113248 parameters, 10113232 gradients, 35.8 GFLOPs
  m: [0.50, 1.00, 512] # summary: 445 layers, 22420896 parameters, 22420880 gradients, 123.9 GFLOPs
  l: [1.00, 1.00, 512] # summary: 667 layers, 27678368 parameters, 27678352 gradients, 143.0 GFLOPs
  x: [1.00, 1.50, 512] # summary: 667 layers, 62142656 parameters, 62142640 gradients, 320.2 GFLOPs

scale: n

# YOLO11n backbone
encoder:
  # [from, repeats, module, args]
  - [-1, 1, Conv, [64, 3, 2]] # 0-P1/2  => s / 2
  - [-1, 1, Conv, [128, 3, 2]] # 1-P2/4 => s / 4
  - [-1, 2, C3k2, [256, False, 0.25]]
  - [-1, 1, Conv, [256, 3, 2]] # 3-P3/8 =>s / 8
  - [-1, 2, C3k2, [512, False, 0.25]]
  - [-1, 1, Conv, [512, 3, 2]] # 5-P4/16  s / 16
  - [-1, 2, C3k2, [512, True]]
  - [-1, 1, Conv, [1024, 3, 2]] # 7-P5/32   s / 32
  - [-1, 2, C3k2, [1024, True]]
  - [-1, 1, SPPF, [1024, 5]] # 9
  - [-1, 2, C2PSA, [1024]] # 10

# YOLO11n head
neck:
  - [-1, 1, nn.Upsample, [None, 2, "nearest"]]
  - [[-1, 6], 1, Concat, [1]] # cat backbone P4
  - [-1, 2, C3k2, [512, False]] # 13

  - [-1, 1, nn.Upsample, [None, 2, "nearest"]]
  - [[-1, 4], 1, Concat, [1]] # cat backbone P3
  - [-1, 2, C3k2, [256, False]] # 16 (P3/8-small)

  - [-1, 1, Conv, [256, 3, 2]]
  - [[-1, 13], 1, Concat, [1]] # cat head P4
  - [-1, 2, C3k2, [512, False]] # 19 (P4/16-medium)

  - [-1, 1, Conv, [512, 3, 2]]
  - [[-1, 10], 1, Concat, [1]] # cat head P5
  - [-1, 2, C3k2, [1024, False]] # 22 (P5/32-large)

decoder:
  - [-1, 2, C2PSA, [1024]]
  - [ -1, 1, SPPF, [ 1024, 5 ] ] # 9
  - [ -1, 2, C3k2, [ 512, True ] ]
  - [-1, 1, nn.Upsample, [None, 2, 'nearest']]   #s / 16
  - [[-1, 19], 1, Concat, [1]]    # [batchsize, 1024, height, width]
  - [-1, 2, C3k2, [256, True]]
  - [-1, 1, nn.Upsample, [None, 2, 'nearest']]  #s / 8
  - [[-1, 16], 1, Concat, [1]]   # [batchsize, 512, height, width]
  - [-1, 2, C3k2, [128, False]]   # [batchsize, 256, height, width]
  - [-1, 1, nn.Upsample, [None, 2, 'nearest']]  #s / 4
  - [-1, 2, C3k2, [64, False]]
  - [-1, 1, nn.Upsample, [None, 2, 'nearest']]  #s / 2
  - [-1, 1, Conv, [ 32, 3, 1] ] # 1-P2/4 => s / 2
  - [-1, 1, nn.Upsample, [ None, 2, 'nearest' ] ]  #s
  - [[-1], 1, SemanticSegment, [nc, 32, 256]] # Detect(P3, P4, P5)
