# YOLOv8 with Hybrid DCN (v2 + v3)
# Multi-scale DCN strategy: DCN v2 for fine details, DCN v3 for semantic features
#
# Strategy:
# - P3 (small objects): DCN v2 for precise localization
# - P4-P5 (larger objects): DCN v3 for semantic understanding
#
# Expected improvement: +5-8% mAP50-95
# Trade-off: Balanced (~10% slower), best speed-accuracy ratio
#
# Best for: Vehicle detection (handles small motorcycles and large buses)

nc: 6 # number of classes
depth_multiple: 0.33
width_multiple: 0.25

# Hybrid DCN backbone
backbone:
  # [from, repeats, module, args]
  - [-1, 1, Conv, [64, 3, 2]] # 0-P1/2
  - [-1, 1, Conv, [128, 3, 2]] # 1-P2/4
  - [-1, 3, C2f, [128, True]] # 2 - standard (early features)
  - [-1, 1, Conv, [256, 3, 2]] # 3-P3/8
  - [-1, 6, DeformC2f, [256, True]] # 4 - DCN v2 (fine details for small objects)
  - [-1, 1, Conv, [512, 3, 2]] # 5-P4/16
  - [-1, 6, DCNv3C2f, [512, True]] # 6 - DCN v3 (semantic features)
  - [-1, 1, Conv, [1024, 3, 2]] # 7-P5/32
  - [-1, 3, DCNv3C2f, [1024, True]] # 8 - DCN v3 (contextual understanding)
  - [-1, 1, SPPF, [1024, 5]] # 9

# Standard head
head:
  - [-1, 1, nn.Upsample, [None, 2, "nearest"]]
  - [[-1, 6], 1, Concat, [1]] # cat backbone P4
  - [-1, 3, C2f, [512]] # 12

  - [-1, 1, nn.Upsample, [None, 2, "nearest"]]
  - [[-1, 4], 1, Concat, [1]] # cat backbone P3
  - [-1, 3, C2f, [256]] # 15 (P3/8-small)

  - [-1, 1, Conv, [256, 3, 2]]
  - [[-1, 12], 1, Concat, [1]] # cat head P4
  - [-1, 3, C2f, [512]] # 18 (P4/16-medium)

  - [-1, 1, Conv, [512, 3, 2]]
  - [[-1, 9], 1, Concat, [1]] # cat head P5
  - [-1, 3, C2f, [1024]] # 21 (P5/32-large)

  - [[15, 18, 21], 1, Detect, [nc]] # Detect(P3, P4, P5)
